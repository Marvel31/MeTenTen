@page "/partner"
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@inject IPartnerService PartnerService
@inject ITopicService TopicService
@inject IFirebaseDataService FirebaseDataService
@inject NavigationManager Navigation

@code {
    private List<Topic> partnerTopics = new();
    private bool isLoading = true;
    private string? partnerDisplayName;
    private IDisposable? topicsSubscription;

    protected override async Task OnInitializedAsync()
    {
        await LoadPartnerTopics();
        await StartRealTimeSync();
    }

    private async Task LoadPartnerTopics()
    {
        isLoading = true;
        try
        {
            // 배우자 정보 조회
            var partnerInfo = await PartnerService.GetPartnerInfoAsync();
            if (partnerInfo != null)
            {
                partnerDisplayName = partnerInfo.PartnerDisplayName;
            }

            // 배우자가 작성 완료한 Topic 목록 조회
            partnerTopics = await PartnerService.GetPartnerCompletedTopicsAsync();
        }
        catch (Exception)
        {
            // 에러 처리
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ViewTopic(Topic topic)
    {
        Navigation.NavigateTo($"/partner-letter?topicId={topic.FirebaseKey}");
    }

    private async Task RefreshTopics()
    {
        await LoadPartnerTopics();
    }

    private async Task StartRealTimeSync()
    {
        try
        {
            var partnerInfo = await PartnerService.GetPartnerInfoAsync();
            if (partnerInfo?.PartnerId != null)
            {
                // 기존 구독 해제
                topicsSubscription?.Dispose();

                // 새로운 구독 시작
                topicsSubscription = await FirebaseDataService.ObservePartnerTopicsAsync(
                    partnerInfo.PartnerId,
                    (updatedTopics) =>
                    {
                        InvokeAsync(() =>
                        {
                            partnerTopics = updatedTopics;
                            StateHasChanged();
                        });
                    });
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[Partner] Error starting real-time sync: {ex.Message}");
        }
    }

    public void Dispose()
    {
        topicsSubscription?.Dispose();
    }
}

<PageTitle>배우자 10&10 - MeTenTen</PageTitle>

<BreadcrumbNavigator CurrentPageTitle="배우자 10&10" />

<div class="partner-container">
    
    <div class="partner-header">
        <h1>💕 배우자 10&10</h1>
        <p>배우자가 작성한 10&10을 확인하고 마음을 나누어보세요.</p>
        <div class="header-actions">
            <button class="btn btn-outline-primary btn-sm" @onclick="RefreshTopics">
                <span class="bi bi-arrow-clockwise"></span> 새로고침
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="topics-list">
            <h3>📋 배우자의 주제 목록</h3>
            @if (partnerTopics.Any())
            {
                <div class="topics-table">
                    @foreach (var topic in partnerTopics.OrderByDescending(t => t.TopicDate))
                    {
                        <div class="topic-list-item" @onclick="() => ViewTopic(topic)">
                            <div class="topic-content">
                                <div class="topic-subject-line">
                                    <h5>@topic.Subject</h5>
                                </div>
                                <div class="topic-meta-line">
                                    <div>
                                        <span class="topic-date">@topic.TopicDate.ToString("yyyy년 MM월 dd일")</span>
                                        <span class="status-badge completed">작성완료</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state">
                    <div class="empty-icon">💌</div>
                    <h3>아직 작성된 10&10이 없습니다</h3>
                    <p>배우자가 10&10을 작성하면 여기에서 확인할 수 있습니다.</p>
                </div>
            }
        </div>
    }
</div>

