@page "/prayer"
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@inject IPrayerService PrayerService

<PageTitle>주요 기도문 - MeTenTen</PageTitle>

<BreadcrumbNavigator CurrentPageTitle="주요 기도문" />

<div class="prayer-container">
    <div class="prayer-header">
        <h1>🙏 주요 기도문</h1>
        <p class="prayer-subtitle">부부를 위한 기도문과 영적 성장을 위한 자료</p>
    </div>

    <div class="prayer-list">
        @foreach (var prayer in prayers)
        {
            <div class="prayer-item">
                <div class="prayer-item-header" @onclick="() => TogglePrayer(prayer.Id)">
                    <h3>@prayer.Title</h3>
                    <span class="toggle-icon">@(expandedPrayers.Contains(prayer.Id) ? "▼" : "▶")</span>
                </div>
                
                @if (expandedPrayers.Contains(prayer.Id))
                {
                    <div class="prayer-item-content">
                        <div class="prayer-text" style="line-height: 1.2;">
                            @((MarkupString)prayer.Content.Replace("\n", "<br/>"))
                        </div>
                        <div class="prayer-actions">
                            <button class="btn btn-sm btn-outline-secondary" @onclick="() => CopyToClipboard(prayer.Content)">
                                <span class="bi bi-clipboard"></span> 복사
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<MeTenTenMaui.Models.Prayer> prayers = new();
    private HashSet<int> expandedPrayers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPrayers();
    }

    private async Task LoadPrayers()
    {
        try
        {
            prayers = await PrayerService.GetAllPrayersAsync();
        }
        catch (Exception ex)
        {
            // 에러 처리
        }
    }

    private void TogglePrayer(int prayerId)
    {
        if (expandedPrayers.Contains(prayerId))
        {
            expandedPrayers.Remove(prayerId);
        }
        else
        {
            expandedPrayers.Add(prayerId);
        }
    }

    private async Task CopyToClipboard(string text)
    {
        try
        {
            // 클립보드 복사 기능 (실제 구현은 플랫폼에 따라 다름)
            // 여기서는 간단한 알림으로 대체
            await Task.CompletedTask;
        }
        catch (Exception ex)
        {
            // 에러 처리
        }
    }
}
