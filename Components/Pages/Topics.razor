@page "/topics"
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@inject ITopicService TopicService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>주제 관리 - MeTenTen</PageTitle>

<BreadcrumbNavigator CurrentPageTitle="주제 관리" />

<div class="topics-container">
    
    <div class="topics-header">
        <h1>📋 주제 관리</h1>
        <p>10&10을 위한 주제들을 관리하고 새로운 주제를 추가해보세요.</p>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (topics.Any())
    {
        <div class="topics-list">
            @foreach (var topic in topics.OrderByDescending(t => t.TopicDate))
            {
                <div class="topic-card" @onclick="() => NavigateToTenTen(topic.Id)">
                    <div class="topic-card-content">
                        <div class="topic-date-section">
                            <div class="date-pill">@topic.TopicDate.ToString("yyyy-MM-dd")</div>
                            <div class="day-text">@GetDayOfWeek(topic.TopicDate)</div>
                        </div>
                        
                        <div class="topic-main-content">
                            <div class="topic-question">
                                @topic.Subject
                            </div>
                            <div class="topic-creation-date">
                                생성일: @topic.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                            </div>
                            <div class="topic-status-badge">
                                <span class="status-badge status-pending">미작성</span>
                            </div>
                        </div>
                        
                        <div class="topic-actions-section">
                            <div class="action-buttons">
                                <button class="action-btn write-btn" 
                                        @onclick="() => NavigateToTenTen(topic.Id)" 
                                        @onclick:stopPropagation="true"
                                        title="10&10 작성하기">
                                    <span class="bi bi-pencil"></span>
                                </button>
                                <button class="action-btn edit-btn" 
                                        @onclick="() => EditTopic(topic)" 
                                        @onclick:stopPropagation="true"
                                        title="주제 수정">
                                    <span class="bi bi-pencil-square"></span>
                                </button>
                                <button class="action-btn delete-btn" 
                                        @onclick="() => DeleteTopic(topic.Id)" 
                                        @onclick:stopPropagation="true"
                                        title="주제 삭제">
                                    <span class="bi bi-trash"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">📝</div>
            <h3>아직 주제가 없습니다</h3>
            <p>새로운 주제를 추가하여 10&10을 시작해보세요.</p>
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <span class="bi bi-plus-circle"></span> 새 주제 추가
            </button>
        </div>
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal-backdrop" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h5>@(isEditing ? "주제 수정" : "새 주제 추가")</h5>
                <button type="button" class="btn-close" @onclick="CloseModal">×</button>
            </div>
            <div class="modal-body">
                <EditForm Model="currentTopic" OnValidSubmit="SaveTopic">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label for="subject">주제 *</label>
                        <InputText id="subject" @bind-Value="currentTopic.Subject" 
                                 class="form-control" placeholder="주제를 입력해주세요" />
                        <ValidationMessage For="@(() => currentTopic.Subject)" class="text-danger" />
                    </div>


                    <div class="form-group">
                        <label for="topicDate">주제 날짜 *</label>
                        <div class="row">
                            <div class="col-md-4">
                                <select class="form-control" @bind="selectedYear" @bind:after="OnDateChanged">
                                    @for (int year = DateTime.Now.Year - 1; year <= DateTime.Now.Year + 1; year++)
                                    {
                                        <option value="@year">@year 년</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select class="form-control" @bind="selectedMonth" @bind:after="OnDateChanged">
                                    @for (int month = 1; month <= 12; month++)
                                    {
                                        <option value="@month">@month 월</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-4">
                                <select class="form-control" @bind="selectedDay" @bind:after="OnDateChanged">
                                    @for (int day = 1; day <= DateTime.DaysInMonth(selectedYear, selectedMonth); day++)
                                    {
                                        <option value="@day">@day 일</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <ValidationMessage For="@(() => currentTopic.TopicDate)" class="text-danger" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">취소</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditing ? "수정" : "추가")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<Topic> topics = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private CreateTopicRequest currentTopic = new();
    private int? editingTopicId = null;
    
    // 날짜 선택을 위한 변수들
    private int selectedYear = DateTime.Now.Year;
    private int selectedMonth = DateTime.Now.Month;
    private int selectedDay = DateTime.Now.Day;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopics();
    }

    private async Task LoadTopics()
    {
        isLoading = true;
        try
        {
            topics = await TopicService.GetTopicsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"주제를 불러오는 중 오류가 발생했습니다: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        isEditing = false;
        editingTopicId = null;
        
        // 현재 날짜로 초기화
        var today = DateTime.Today;
        selectedYear = today.Year;
        selectedMonth = today.Month;
        selectedDay = today.Day;
        
        currentTopic = new CreateTopicRequest
        {
            TopicDate = today
        };
        errorMessage = string.Empty;
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
        isEditing = false;
        editingTopicId = null;
        currentTopic = new CreateTopicRequest();
        errorMessage = string.Empty;
    }

    private async Task SaveTopic()
    {
        isSaving = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (isEditing && editingTopicId.HasValue)
            {
                var updateRequest = new UpdateTopicRequest
                {
                    Subject = currentTopic.Subject,
                    Description = currentTopic.Description,
                    TopicDate = currentTopic.TopicDate,
                    IsActive = true
                };
                await TopicService.UpdateTopicAsync(editingTopicId.Value, updateRequest);
            }
            else
            {
                await TopicService.CreateTopicAsync(currentTopic);
            }

            await LoadTopics();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"주제 저장 중 오류가 발생했습니다: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private void NavigateToTenTen(int topicId)
    {
        NavigationManager.NavigateTo($"/tenten?topicId={topicId}");
    }

    private string GetDayOfWeek(DateTime date)
    {
        return date.DayOfWeek switch
        {
            DayOfWeek.Sunday => "일요일",
            DayOfWeek.Monday => "월요일",
            DayOfWeek.Tuesday => "화요일",
            DayOfWeek.Wednesday => "수요일",
            DayOfWeek.Thursday => "목요일",
            DayOfWeek.Friday => "금요일",
            DayOfWeek.Saturday => "토요일",
            _ => ""
        };
    }

    private void EditTopic(Topic topic)
    {
        isEditing = true;
        editingTopicId = topic.Id;
        
        // 기존 날짜로 초기화
        selectedYear = topic.TopicDate.Year;
        selectedMonth = topic.TopicDate.Month;
        selectedDay = topic.TopicDate.Day;
        
        currentTopic = new CreateTopicRequest
        {
            Subject = topic.Subject,
            Description = topic.Description,
            TopicDate = topic.TopicDate
        };
        errorMessage = string.Empty;
        showModal = true;
        StateHasChanged();
    }

    private async Task DeleteTopic(int topicId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "정말로 이 주제를 삭제하시겠습니까?"))
        {
            try
            {
                var result = await TopicService.DeleteTopicAsync(topicId);
                if (result)
                {
                    // 삭제 성공 시 목록에서 해당 항목 제거
                    topics.RemoveAll(t => t.Id == topicId);
                    StateHasChanged();
                }
                else
                {
                    errorMessage = "주제를 찾을 수 없습니다.";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"주제 삭제 중 오류가 발생했습니다: {ex.Message}";
            }
        }
    }

    private void OnDateChanged()
    {
        try
        {
            // 선택된 날짜가 유효한지 확인
            var daysInMonth = DateTime.DaysInMonth(selectedYear, selectedMonth);
            if (selectedDay > daysInMonth)
            {
                selectedDay = daysInMonth;
            }
            
            // currentTopic의 TopicDate 업데이트
            currentTopic.TopicDate = new DateTime(selectedYear, selectedMonth, selectedDay);
        }
        catch
        {
            // 잘못된 날짜인 경우 오늘 날짜로 설정
            var today = DateTime.Today;
            selectedYear = today.Year;
            selectedMonth = today.Month;
            selectedDay = today.Day;
            currentTopic.TopicDate = today;
        }
        
        StateHasChanged();
    }
}
