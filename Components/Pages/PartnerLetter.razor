@page "/partner-letter"
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@using System.Linq
@inject IPartnerService PartnerService
@inject IFirebaseDataService FirebaseDataService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<PageTitle>배우자의 10&10 - MeTenTen</PageTitle>

<div class="fullscreen-writing-container">
    <div class="writing-header">
        <div class="header-left">
            <button class="btn btn-outline-secondary" @onclick="CloseLetter">
                <span class="bi bi-arrow-left"></span> 뒤로가기
            </button>
        </div>
        <div class="header-center">
            <h2>배우자의 10&10</h2>
        </div>
        <div class="header-right">
            <button class="btn btn-outline-danger" @onclick="CloseLetter">
                <span class="bi bi-x"></span> 닫기
            </button>
        </div>
    </div>
    <div class="writing-content">
        <div class="topic-info-section-readonly">
            <div class="topic-display">
                <h3>@topicSubject</h3>
            </div>
            <div class="topic-meta-readonly">
                <span class="topic-date">📅 @FormatDate(topicCreatedAt)</span>
                @if (!string.IsNullOrEmpty(topicDescription))
                {
                    <p class="topic-description">@topicDescription</p>
                }
            </div>
        </div>
        
        <div class="read-mode-content">
            <div class="content-display">
                <h4>📝 작성된 내용</h4>
                <div class="content-text">
                    @if (tenTens.Any())
                    {
                        @foreach (MeTenTenMaui.Models.TenTen tenTen in tenTens)
                        {
                            <div style="margin-bottom: 1.5rem;">
                                @tenTen.Content
                            </div>
                        }
                    }
                    else
                    {
                        <p>아직 작성된 10&10이 없습니다.</p>
                    }
                </div>
            </div>
            <div class="writing-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseLetter">닫기</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string topicSubject = "";
    private string topicDescription = "";
    private DateTime topicCreatedAt = DateTime.Now;
    private List<MeTenTenMaui.Models.TenTen> tenTens = new();
    private IDisposable? tenTensSubscription;

    [SupplyParameterFromQuery(Name = "topicId")]
    public string? TopicId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(TopicId))
        {
            await JSRuntime.InvokeVoidAsync("alert", "토픽 정보를 찾을 수 없습니다.");
            Navigation.NavigateTo("/partner");
            return;
        }

        await LoadPartnerTopicAsync();
        await StartRealTimeSync();
    }

    private async Task LoadPartnerTopicAsync()
    {
        try
        {
            // 배우자의 Topic 목록에서 해당 Topic 조회
            var partnerTopics = await PartnerService.GetPartnerCompletedTopicsAsync();
            var selectedTopic = partnerTopics.FirstOrDefault(t => t.FirebaseKey == TopicId);
            
            if (selectedTopic != null)
            {
                topicSubject = selectedTopic.Subject;
                topicDescription = selectedTopic.Description ?? "";
                topicCreatedAt = selectedTopic.TopicDate;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "해당 토픽을 찾을 수 없습니다.");
                Navigation.NavigateTo("/partner");
                return;
            }

            // 해당 Topic의 TenTens 조회 (공유 DEK 사용)
            tenTens = await PartnerService.GetPartnerTopicTenTensAsync(TopicId);
            
            if (!tenTens.Any())
            {
                await JSRuntime.InvokeVoidAsync("alert", "해당 토픽의 10&10을 찾을 수 없습니다.");
                Navigation.NavigateTo("/partner");
            }
            else
            {
                // CreatedAt 기준으로 정렬
                tenTens = tenTens.OrderBy(t => t.CreatedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[PartnerLetter] Error loading topic: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "토픽을 불러오는 중 오류가 발생했습니다.");
            Navigation.NavigateTo("/partner");
        }
    }

    private void CloseLetter()
    {
        Navigation.NavigateTo("/partner");
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("yyyy년 MM월 dd일");
    }


    private async Task StartRealTimeSync()
    {
        try
        {
            var partnerInfo = await PartnerService.GetPartnerInfoAsync();
            if (partnerInfo?.PartnerId != null && !string.IsNullOrEmpty(TopicId))
            {
                // 기존 구독 해제
                tenTensSubscription?.Dispose();

                // 새로운 구독 시작
                tenTensSubscription = await FirebaseDataService.ObservePartnerTenTensAsync(
                    partnerInfo.PartnerId,
                    TopicId,
                    (updatedTenTens) =>
                    {
                        InvokeAsync(async () =>
                        {
                            // 공유 DEK로 복호화 처리
                            tenTens = await PartnerService.GetPartnerTopicTenTensAsync(TopicId);
                            tenTens = tenTens.OrderBy(t => t.CreatedAt).ToList();
                            StateHasChanged();
                        });
                    });
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[PartnerLetter] Error starting real-time sync: {ex.Message}");
        }
    }

    public void Dispose()
    {
        tenTensSubscription?.Dispose();
    }
}

