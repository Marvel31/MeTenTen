@page "/tenten"
@using System.Linq
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@inject ITenTenService TenTenService
@inject ITopicService TopicService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>10&10 - MeTenTen</PageTitle>

<div class="tenten-container">
    <div class="navigation-breadcrumb">
        <a href="/" class="breadcrumb-link">
            <span class="bi bi-house"></span> 홈
        </a>
        <span class="breadcrumb-separator">></span>
        <a href="/topics" class="breadcrumb-link">10&10 관리</a>
        <span class="breadcrumb-separator">></span>
        <span class="breadcrumb-current">10&10 작성</span>
    </div>
    
    <div class="tenten-header">
        <h1>💕 10&10</h1>
        <p>10분간 마음을 적고 10분간 대화를 나누세요</p>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (tenTens.Any())
    {
        <div class="tenten-list">
            @foreach (var tenTen in tenTens.OrderByDescending(t => t.CreatedAt))
            {
                <div class="tenten-card @(tenTen.IsReadByPartner ? "read" : "unread")">
                    <div class="tenten-header">
                        <div class="tenten-meta">
                            <span class="topic-badge">@tenTen.TopicSubject</span>
                            <span class="date-info">작성일: @tenTen.CreatedAt.ToString("yyyy-MM-dd HH:mm")</span>
                        </div>
                        <div class="tenten-actions">
                            @if (tenTen.UserId == 1) // Dummy user ID for current user
                            {
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => EditTenTen(tenTen)" title="수정">
                                    <span class="bi bi-pencil"></span>
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteTenTen(tenTen.Id)" title="삭제">
                                    <span class="bi bi-trash"></span>
                                </button>
                            }
                            else
                            {
                                @if (!tenTen.IsReadByPartner)
                                {
                                    <button class="btn btn-sm btn-success" @onclick="() => MarkAsRead(tenTen.Id)" title="읽음으로 표시">
                                        <span class="bi bi-check-circle"></span> 읽음
                                    </button>
                                }
                            }
                        </div>
                    </div>
                    <div class="tenten-content">
                        <p>@tenTen.Content</p>
                    </div>
                    <div class="tenten-footer">
                        <div class="read-status">
                            @if (tenTen.IsReadByPartner)
                            {
                                <span class="badge bg-success">읽음</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">💖</div>
            <h3>아직 작성된 10&10이 없습니다</h3>
            <p>이 주제에 대한 10&10이 아직 작성되지 않았습니다.</p>
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <span class="bi bi-pencil-square"></span> 10&10 작성하기
            </button>
        </div>
    }
</div>

<!-- Create/Edit Full Screen -->
@if (showModal)
{
    <div class="fullscreen-editor">
        <div class="editor-container">
            <div class="editor-header">
                <h2>@(isEditing ? "10&10 수정" : "새 10&10 작성")</h2>
                <button type="button" class="btn btn-outline-secondary" @onclick="CloseModal">
                    <span class="bi bi-x-lg"></span> 닫기
                </button>
            </div>
            <div class="editor-content">
                <EditForm Model="currentTenTen" OnValidSubmit="SaveTenTen">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label>주제</label>
                        <div class="selected-topic-display">
                            @if (selectedTopicId > 0)
                            {
                                var selectedTopic = topics.FirstOrDefault(t => t.Id == selectedTopicId);
                                if (selectedTopic != null)
                                {
                                    <div class="topic-info">
                                        <span class="topic-subject">@selectedTopic.Subject</span>
                                        <span class="topic-date">(@selectedTopic.TopicDate.ToString("yyyy-MM-dd"))</span>
                                    </div>
                                }
                            }
                            else
                            {
                                <span class="text-muted">주제가 선택되지 않았습니다</span>
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="content">10&10 내용 *</label>
                        <div class="timer-container">
                            <div class="timer-display">
                                <span class="timer-label">작성 시간:</span>
                                <span class="timer-value @(isTimerRunning ? "running" : "")">@FormatTime(remainingTime)</span>
                                @if (isTimerRunning)
                                {
                                    <span class="timer-status">⏱️ 작성 중...</span>
                                }
                                else if (remainingTime == 0)
                                {
                                    <span class="timer-status">✅ 시간 완료!</span>
                                }
                                else
                                {
                                    <span class="timer-status">⏸️ 대기 중</span>
                                }
                            </div>
                            <div class="timer-controls">
                                @if (!isTimerRunning && remainingTime > 0)
                                {
                                    <button type="button" class="btn btn-success btn-sm" @onclick="StartTimer">
                                        <span class="bi bi-play"></span> 시작
                                    </button>
                                }
                                else if (isTimerRunning)
                                {
                                    <button type="button" class="btn btn-warning btn-sm" @onclick="PauseTimer">
                                        <span class="bi bi-pause"></span> 일시정지
                                    </button>
                                }
                                <button type="button" class="btn btn-secondary btn-sm" @onclick="ResetTimer">
                                    <span class="bi bi-arrow-clockwise"></span> 리셋
                                </button>
                            </div>
                        </div>
                        <InputTextArea id="content" @bind-Value="currentTenTen.Content" 
                                     class="@GetTextAreaClass()" rows="20" 
                                     placeholder="10분간 마음을 적어보세요..." />
                        <ValidationMessage For="@(() => currentTenTen.Content)" class="text-danger" />
                        <small class="form-text text-muted">최소 10자 이상 입력해주세요.</small>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <div class="editor-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">취소</button>
                        <button type="submit" class="btn btn-primary" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            @(isEditing ? "수정" : "작성")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    private List<MeTenTenMaui.Models.TenTen> tenTens = new();
    private List<MeTenTenMaui.Models.Topic> topics = new();
    private bool isLoading = true;
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private MeTenTenMaui.Models.CreateTenTenRequest currentTenTen = new();
    private int? editingTenTenId = null;
    private int selectedTopicId = 0; // 0 for all topics
    
    // 타이머 관련 변수
    private int remainingTime = 600; // 10분 = 600초
    private bool isTimerRunning = false;
    private Timer? timer;
    private DateTime timerStartTime;
    private int pausedTime = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopics();
        await LoadTenTens();
    }

    private async Task LoadTopics()
    {
        try
        {
            topics = await TopicService.GetTopicsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"주제를 불러오는 중 오류가 발생했습니다: {ex.Message}";
        }
    }

    private async Task LoadTenTens()
    {
        isLoading = true;
        try
        {
            if (selectedTopicId == 0)
            {
                tenTens = await TenTenService.GetTenTensAsync();
            }
            else
            {
                tenTens = await TenTenService.GetTenTensByTopicAsync(selectedTopicId);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"10&10을 불러오는 중 오류가 발생했습니다: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ShowCreateModal()
    {
        isEditing = false;
        editingTenTenId = null;
        currentTenTen = new MeTenTenMaui.Models.CreateTenTenRequest
        {
            TopicId = selectedTopicId
        };
        errorMessage = string.Empty;
        ResetTimer(); // 타이머 리셋
        showModal = true;
    }

    private void EditTenTen(MeTenTenMaui.Models.TenTen tenTen)
    {
        isEditing = true;
        editingTenTenId = tenTen.Id;
        currentTenTen = new MeTenTenMaui.Models.CreateTenTenRequest
        {
            Content = tenTen.Content,
            TopicId = tenTen.TopicId
        };
        errorMessage = string.Empty;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        isEditing = false;
        editingTenTenId = null;
        currentTenTen = new CreateTenTenRequest();
        errorMessage = string.Empty;
        StopTimer(); // 타이머 정지
    }

    private async Task SaveTenTen()
    {
        isSaving = true;
        errorMessage = string.Empty;
        StateHasChanged();

        try
        {
            if (isEditing && editingTenTenId.HasValue)
            {
                var updateRequest = new UpdateTenTenRequest
                {
                    Content = currentTenTen.Content
                };
                await TenTenService.UpdateTenTenAsync(editingTenTenId.Value, updateRequest);
            }
            else
            {
                await TenTenService.CreateTenTenAsync(currentTenTen);
            }

            await LoadTenTens();
            CloseModal();
        }
        catch (Exception ex)
        {
            errorMessage = $"10&10 저장 중 오류가 발생했습니다: {ex.Message}";
        }
        finally
        {
            isSaving = false;
            StateHasChanged();
        }
    }

    private async Task DeleteTenTen(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "정말로 이 10&10을 삭제하시겠습니까?"))
        {
            try
            {
                var success = await TenTenService.DeleteTenTenAsync(id);
                if (success)
                {
                    await LoadTenTens();
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"10&10 삭제 중 오류가 발생했습니다: {ex.Message}";
            }
        }
    }

    private async Task MarkAsRead(int id)
    {
        try
        {
            var success = await TenTenService.MarkAsReadAsync(id);
            if (success)
            {
                await LoadTenTens();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"10&10 읽음 처리 중 오류가 발생했습니다: {ex.Message}";
        }
    }

    // 타이머 관련 메서드들
    private void StartTimer()
    {
        if (!isTimerRunning && remainingTime > 0)
        {
            isTimerRunning = true;
            timerStartTime = DateTime.Now;
            timer = new Timer(TimerCallback, null, 0, 1000); // 1초마다 업데이트
            StateHasChanged();
        }
    }

    private void PauseTimer()
    {
        if (isTimerRunning)
        {
            isTimerRunning = false;
            timer?.Dispose();
            pausedTime = remainingTime;
            StateHasChanged();
        }
    }

    private void ResetTimer()
    {
        StopTimer();
        remainingTime = 600; // 10분으로 리셋
        pausedTime = 0;
        StateHasChanged();
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        timer?.Dispose();
        timer = null;
    }

    private void TimerCallback(object? state)
    {
        if (isTimerRunning)
        {
            var elapsed = (int)(DateTime.Now - timerStartTime).TotalSeconds;
            remainingTime = Math.Max(0, 600 - elapsed);

            if (remainingTime <= 0)
            {
                isTimerRunning = false;
                timer?.Dispose();
                // 타이머 완료 시 알림 (선택사항)
                InvokeAsync(() => {
                    StateHasChanged();
                    // 여기에 타이머 완료 알림을 추가할 수 있습니다
                });
            }
            else
            {
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private string FormatTime(int seconds)
    {
        var minutes = seconds / 60;
        var remainingSeconds = seconds % 60;
        return $"{minutes:D2}:{remainingSeconds:D2}";
    }

    private string GetTextAreaClass()
    {
        var baseClass = "form-control content-textarea";
        if (isTimerRunning)
        {
            baseClass += " writing-mode";
        }
        return baseClass;
    }

    public void Dispose()
    {
        StopTimer();
    }
}
