@page "/tenten"
@using System.Linq
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@inject ITenTenService TenTenService
@inject ITopicService TopicService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>10&10 - MeTenTen</PageTitle>

<BreadcrumbNavigator CurrentPageTitle="10&10" />

<div class="tenten-container">
    <div class="tenten-header">
        <h1>💕 10&10</h1>
        <p>10분간 마음을 적고 10분간 대화를 나누세요</p>
    </div>

    <!-- 월별 필터링 -->
    <div class="month-filter-compact">
        <div class="filter-row">
            <div class="filter-item">
                <label for="monthSelect">월 선택:</label>
                <select id="monthSelect" @bind="selectedMonth" @bind:after="OnMonthChanged" class="form-control form-control-sm">
                    @for (int i = 0; i < 12; i++)
                    {
                        var month = DateTime.Now.AddMonths(-i);
                        <option value="@month.ToString("yyyy-MM")">@month.ToString("yyyy년 MM월")</option>
                    }
                </select>
            </div>
            <div class="filter-item">
                <span class="selected-month-display">📅 @GetSelectedMonthDisplay()</span>
            </div>
            <div class="filter-item">
                <button class="btn btn-primary btn-sm" @onclick="ShowNewTopicModal">
                    <span class="bi bi-plus-circle"></span> 새 주제 추가
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredTopics.Any())
    {
        <div class="topics-list">
            <h3>📋 주제 목록</h3>
            <div class="topics-table">
                @foreach (var topic in filteredTopics.OrderByDescending(t => t.CreatedAt))
                {
                    <div class="topic-list-item" @onclick="() => SelectTopic(topic)">
                        <div class="topic-content">
                            <div class="topic-subject-line">
                                <h5>@topic.Subject</h5>
                            </div>
                            <div class="topic-meta-line">
                                <div class="topic-date-status">
                                    <span class="topic-date">@topic.CreatedAt.ToString("yyyy년 MM월 dd일")</span>
                                    @if (HasTenTenForTopic(topic.Id))
                                    {
                                        <span class="status-badge completed">작성완료</span>
                                    }
                                    else
                                    {
                                        <span class="status-badge pending">미작성</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">📝</div>
            <h3>@selectedMonth.ToString("yyyy년 MM월")에 작성된 주제가 없습니다</h3>
            <p>새 주제를 추가하거나 다른 월을 선택해보세요.</p>
        </div>
    }
</div>

<!-- 새 주제 추가 모달 -->
@if (showNewTopicModal)
{
    <div class="modal-overlay" @onclick="CloseNewTopicModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>새 주제 추가</h3>
                <button class="btn-close" @onclick="CloseNewTopicModal">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="newTopic" OnValidSubmit="SaveNewTopic">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label for="topicDate">날짜 *</label>
                        <InputDate id="topicDate" @bind-Value="newTopic.TopicDate" class="form-control" />
                        <ValidationMessage For="@(() => newTopic.TopicDate)" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="topicSubject">주제 *</label>
                        <InputText id="topicSubject" @bind-Value="newTopic.Subject" 
                                 class="form-control" placeholder="주제를 입력하세요" />
                        <ValidationMessage For="@(() => newTopic.Subject)" class="text-danger" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseNewTopicModal">취소</button>
                        <button type="submit" class="btn btn-primary">저장</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


<!-- 삭제 확인 모달 -->
@if (showDeleteConfirmationModal)
{
    <div class="modal-overlay" @onclick="CloseDeleteConfirmationModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>주제 삭제 확인</h3>
                <button class="btn-close" @onclick="CloseDeleteConfirmationModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <strong>⚠️ 주의:</strong> 이 주제와 관련된 모든 10&10 내용이 함께 삭제됩니다.
                </div>
                <p>정말로 "<strong>@topicToDelete?.Subject</strong>" 주제를 삭제하시겠습니까?</p>
                <p class="text-muted">이 작업은 되돌릴 수 없습니다.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">취소</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTopic">
                    <span class="bi bi-trash"></span> 삭제
                </button>
            </div>
        </div>
    </div>
}

<!-- 10&10 작성/보기 전체 화면 -->
@if (showTenTenModal)
{
    <div class="fullscreen-writing-container">
        <div class="writing-header">
            <div class="header-left">
                <button class="btn btn-outline-secondary" @onclick="CloseTenTenModal">
                    <span class="bi bi-arrow-left"></span> 뒤로가기
                </button>
            </div>
            <div class="header-center">
                <h2>@(isEditing ? "10&10 수정" : "10&10 작성")</h2>
            </div>
            <div class="header-right">
                <button class="btn btn-outline-danger" @onclick="CloseTenTenModal">
                    <span class="bi bi-x"></span> 닫기
                </button>
            </div>
        </div>
        <div class="writing-content">
                @if (selectedTopic != null)
                {
                    <div class="topic-info-section">
                        <div class="form-group">
                            <label for="topicSubject">주제 *</label>
                            <input type="text" id="topicSubject" @bind="selectedTopic.Subject" 
                                   class="form-control" placeholder="주제를 입력하세요" />
                        </div>
                        
                        <div class="topic-meta-readonly">
                            <span class="topic-date">📅 @selectedTopic.CreatedAt.ToString("yyyy년 MM월 dd일")</span>
                            @if (!string.IsNullOrEmpty(selectedTopic.Description))
                            {
                                <p class="topic-description">@selectedTopic.Description</p>
                            }
                        </div>
                    </div>

                    @if (HasTenTenForTopic(selectedTopic.Id) && !isEditing)
                    {
                        <!-- 읽기 모드 -->
                        <div class="read-mode-content">
                            <div class="content-display">
                                <h4>📝 작성된 내용</h4>
                                <div class="content-text">
                                    @currentTenTen.Content
                                </div>
                            </div>
                            <div class="writing-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseTenTenModal">닫기</button>
                                <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(selectedTopic)">
                                    <span class="bi bi-trash"></span> 삭제
                                </button>
                                <button type="button" class="btn btn-warning" @onclick="() => EnableEditMode()">
                                    <span class="bi bi-pencil"></span> 수정
                                </button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- 작성 모드 -->
                        <EditForm Model="currentTenTen" OnValidSubmit="SaveTenTen">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="content">10&10 내용 *</label>
                                <div class="timer-container">
                                    <div class="timer-display">
                                        <span class="timer-label">작성 시간:</span>
                                        <span class="timer-value @(isTimerRunning ? "running" : "")">@FormatTime(remainingTime)</span>
                                        @if (isTimerRunning)
                                        {
                                            <span class="timer-status">⏱️ 작성 중...</span>
                                        }
                                        else if (remainingTime == 0)
                                        {
                                            <span class="timer-status">✅ 시간 완료!</span>
                                        }
                                        else
                                        {
                                            <span class="timer-status">⏸️ 대기 중</span>
                                        }
                                    </div>
                                    <div class="timer-controls">
                                        @if (!isTimerRunning && remainingTime > 0)
                                        {
                                            <button type="button" class="btn btn-success btn-sm" @onclick="StartTimer">
                                                <span class="bi bi-play"></span> 시작
                                            </button>
                                        }
                                        else if (isTimerRunning)
                                        {
                                            <button type="button" class="btn btn-warning btn-sm" @onclick="PauseTimer">
                                                <span class="bi bi-pause"></span> 일시정지
                                            </button>
                                        }
                                        <button type="button" class="btn btn-secondary btn-sm" @onclick="ResetTimer">
                                            <span class="bi bi-arrow-clockwise"></span> 리셋
                                        </button>
                                    </div>
                                </div>
                                <InputTextArea id="content" @bind-Value="currentTenTen.Content"
                                            class="@GetTextAreaClass()" rows="20"
                                            placeholder="10분간 마음을 적어보세요..." />
                                <ValidationMessage For="@(() => currentTenTen.Content)" class="text-danger" />
                                <small class="form-text text-muted">최소 10자 이상 입력해주세요.</small>
                            </div>

                            <div class="writing-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseTenTenModal">취소</button>
                                <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(selectedTopic)">
                                    <span class="bi bi-trash"></span> 삭제
                                </button>
                                <button type="submit" class="btn btn-primary btn-lg">저장</button>
                            </div>
                        </EditForm>
                    }
                }
        </div>
    </div>
}

@code {
    private List<MeTenTenMaui.Models.TenTen> tenTens = new();
    private List<MeTenTenMaui.Models.Topic> topics = new();
    private List<MeTenTenMaui.Models.Topic> filteredTopics = new();
    private DateTime selectedMonth = DateTime.Now;
    private bool isLoading = true;
    private bool showNewTopicModal = false;
    private bool showDeleteConfirmationModal = false;
    private bool showTenTenModal = false;
    private bool isEditing = false;
    private MeTenTenMaui.Models.Topic? selectedTopic;
    private MeTenTenMaui.Models.Topic? topicToDelete;
    private MeTenTenMaui.Models.CreateTenTenRequest currentTenTen = new();
    private MeTenTenMaui.Models.CreateTopicRequest newTopic = new();

    // 타이머 관련 변수
    private int remainingTime = 600; // 10분 = 600초
    private bool isTimerRunning = false;
    private Timer? timer;
    private DateTime timerStartTime;
    private int pausedTime = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        FilterTopicsByMonth();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            tenTens = await TenTenService.GetAllTenTensAsync();
            topics = await TopicService.GetAllTopicsAsync();
        }
        catch (Exception ex)
        {
            // 에러 처리
        }
        finally
        {
            isLoading = false;
        }
    }

    private void OnMonthChanged()
    {
        FilterTopicsByMonth();
        StateHasChanged();
    }

    private void FilterTopicsByMonth()
    {
        var startDate = new DateTime(selectedMonth.Year, selectedMonth.Month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);
        
        filteredTopics = topics.Where(t => t.CreatedAt >= startDate && t.CreatedAt <= endDate).ToList();
    }

    private bool HasTenTenForTopic(int topicId)
    {
        return tenTens.Any(t => t.TopicId == topicId);
    }

    private void ShowNewTopicModal()
    {
        newTopic = new MeTenTenMaui.Models.CreateTopicRequest
        {
            TopicDate = DateTime.Now,
            CreatedAt = DateTime.Now
        };
        showNewTopicModal = true;
    }

    private void CloseNewTopicModal()
    {
        showNewTopicModal = false;
        newTopic = new();
    }


    private void ShowDeleteConfirmation(MeTenTenMaui.Models.Topic topic)
    {
        topicToDelete = topic;
        showDeleteConfirmationModal = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        showDeleteConfirmationModal = false;
        topicToDelete = null;
    }

    private async Task ConfirmDeleteTopic()
    {
        if (topicToDelete != null)
        {
            try
            {
                await TopicService.DeleteTopicAsync(topicToDelete.Id);
                await LoadData();
                FilterTopicsByMonth();
                CloseDeleteConfirmationModal();
            }
            catch (Exception ex)
            {
                // 에러 처리
            }
        }
    }

    private async Task SaveNewTopic()
    {
        try
        {
            await TopicService.CreateTopicAsync(newTopic);
            await LoadData();
            FilterTopicsByMonth();
            CloseNewTopicModal();
        }
        catch (Exception ex)
        {
            // 에러 처리
        }
    }

    private void SelectTopic(MeTenTenMaui.Models.Topic topic)
    {
        selectedTopic = topic;
        var existingTenTen = tenTens.FirstOrDefault(t => t.TopicId == topic.Id);
        
        if (existingTenTen != null)
        {
            // 기존 10&10이 있으면 읽기 모드
            isEditing = false;
            currentTenTen = new MeTenTenMaui.Models.CreateTenTenRequest
            {
                Content = existingTenTen.Content,
                TopicId = existingTenTen.TopicId
            };
        }
        else
        {
            // 기존 10&10이 없으면 새로 작성
            isEditing = false;
            currentTenTen = new MeTenTenMaui.Models.CreateTenTenRequest
            {
                TopicId = topic.Id
            };
        }
        
        showTenTenModal = true;
    }

    private void CloseTenTenModal()
    {
        showTenTenModal = false;
        selectedTopic = null;
        currentTenTen = new();
        isEditing = false;
        StopTimer();
    }

    private void EnableEditMode()
    {
        isEditing = true;
        StateHasChanged();
    }

    private async Task SaveTenTen()
    {
        try
        {
            // 주제 수정이 있으면 업데이트
            if (selectedTopic != null)
            {
                var updateRequest = new MeTenTenMaui.Models.UpdateTopicRequest
                {
                    Id = selectedTopic.Id,
                    Subject = selectedTopic.Subject,
                    Description = selectedTopic.Description,
                    TopicDate = selectedTopic.TopicDate,
                    IsActive = true
                };
                await TopicService.UpdateTopicAsync(selectedTopic.Id, updateRequest);
            }

            if (isEditing)
            {
                var existingTenTen = tenTens.FirstOrDefault(t => t.TopicId == currentTenTen.TopicId);
                if (existingTenTen != null)
                {
                    existingTenTen.Content = currentTenTen.Content;
                    existingTenTen.EmotionTag = currentTenTen.EmotionTag;
                    existingTenTen.ImportanceLevel = currentTenTen.ImportanceLevel;
                    await TenTenService.UpdateTenTenAsync(existingTenTen);
                }
            }
            else
            {
                await TenTenService.CreateTenTenAsync(currentTenTen);
            }
            
            await LoadData();
            CloseTenTenModal();
        }
        catch (Exception ex)
        {
            // 에러 처리
        }
    }

    // 타이머 관련 메서드들
    private void StartTimer()
    {
        if (!isTimerRunning && remainingTime > 0)
        {
            isTimerRunning = true;
            timerStartTime = DateTime.Now;
            timer = new Timer(TimerCallback, null, 0, 1000); // 1초마다 업데이트
            StateHasChanged();
        }
    }

    private void PauseTimer()
    {
        if (isTimerRunning)
        {
            isTimerRunning = false;
            timer?.Dispose();
            pausedTime = remainingTime;
            StateHasChanged();
        }
    }

    private void ResetTimer()
    {
        StopTimer();
        remainingTime = 600; // 10분으로 리셋
        pausedTime = 0;
        StateHasChanged();
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        timer?.Dispose();
        timer = null;
    }

    private void TimerCallback(object? state)
    {
        if (isTimerRunning)
        {
            var elapsed = (int)(DateTime.Now - timerStartTime).TotalSeconds;
            remainingTime = Math.Max(0, 600 - elapsed);

            if (remainingTime <= 0)
            {
                isTimerRunning = false;
                timer?.Dispose();
                InvokeAsync(() => {
                    StateHasChanged();
                });
            }
            else
            {
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private string FormatTime(int seconds)
    {
        var minutes = seconds / 60;
        var remainingSeconds = seconds % 60;
        return $"{minutes:D2}:{remainingSeconds:D2}";
    }

    private string GetTextAreaClass()
    {
        var baseClass = "form-control content-textarea";
        if (isTimerRunning)
        {
            baseClass += " writing-mode";
        }
        return baseClass;
    }


    private string GetSelectedMonthDisplay()
    {
        if (DateTime.TryParse(selectedMonth.ToString("yyyy-MM-01"), out DateTime monthDate))
        {
            return monthDate.ToString("yyyy년 MM월");
        }
        return selectedMonth.ToString("yyyy년 MM월");
    }

    public void Dispose()
    {
        StopTimer();
    }
}
