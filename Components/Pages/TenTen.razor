@page "/tenten"
@using System.Linq
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@using Microsoft.AspNetCore.Components.Web
@inject ITenTenService TenTenService
@inject ITopicService TopicService
@inject IFileStorageService FileStorageService
@inject IPartnerService PartnerService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@implements IDisposable

<PageTitle>10&10 - ME 10&10</PageTitle>

<BreadcrumbNavigator CurrentPageTitle="10&10" />

<div class="tenten-container">
    <div class="tenten-header">
        <h1>💕 10&10</h1>
        <p>10분간 마음을 적고 10분간 대화를 나누세요</p>
    </div>

    <!-- 월별 필터링 -->
    <div class="month-filter-compact">
        <div class="filter-row">
            <div class="filter-item">
                <span class="selected-month-display clickable" @onclick="ShowMonthSelector">
                    📅 @GetSelectedMonthDisplay() <span class="bi bi-chevron-down"></span>
                </span>
            </div>
            <div class="filter-item">
                <button class="btn btn-primary btn-sm" @onclick="ShowNewTopicModal">
                    <span class="bi bi-plus-circle"></span> 새 주제 추가
                </button>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredTopics.Any())
    {
        <div class="topics-list">
            <h3>📋 주제 목록</h3>
            <div class="topics-table">
                @foreach (var topic in filteredTopics.OrderByDescending(t => t.TopicDate))
                {
                    <div class="topic-list-item" @onclick="() => SelectTopic(topic)">
                        <div class="topic-content">
                            <div class="topic-subject-line">
                                <h5>@topic.Subject</h5>
                            </div>
                            <div class="topic-meta-line">
                                <div class="
">
                                    <span class="topic-date">@topic.TopicDate.ToString("yyyy년 MM월 dd일")</span>
                                    @if (HasTenTenForTopic(topic.Id))
                                    {
                                        <span class="status-badge completed">작성완료</span>
                                    }
                                    else
                                    {
                                        <span class="status-badge pending">미작성</span>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="empty-state">
            <div class="empty-icon">📝</div>
            <h3>@selectedMonth.ToString("yyyy년 MM월")에 작성된 주제가 없습니다</h3>
            <p>새 주제를 추가하거나 다른 월을 선택해보세요.</p>
        </div>
    }
</div>

<!-- 월 선택 모달 -->
@if (showMonthSelectorModal)
{
    <div class="modal-overlay" @onclick="CloseMonthSelector">
        <div class="modal-content month-selector-modal" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>월 선택</h3>
                <button class="btn-close" @onclick="CloseMonthSelector">&times;</button>
            </div>
            <div class="modal-body">
                <div class="month-grid">
                    @for (int i = -6; i <= 6; i++)
                    {
                        var month = DateTime.Now.AddMonths(i);
                        var isSelected = month.Year == selectedMonth.Year && month.Month == selectedMonth.Month;
                        <button class="month-item @(isSelected ? "selected" : "")" 
                                @onclick="() => SelectMonth(month)">
                            @month.ToString("yyyy년 MM월")
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- 새 주제 추가 모달 -->
@if (showNewTopicModal)
{
    <div class="modal-overlay" @onclick="CloseNewTopicModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>새 주제 추가</h3>
                <button class="btn-close" @onclick="CloseNewTopicModal">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="newTopic" OnValidSubmit="SaveNewTopic">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label for="topicDate">날짜 *</label>
                        <InputDate id="topicDate" @bind-Value="newTopic.TopicDate" class="form-control" />
                        <ValidationMessage For="@(() => newTopic.TopicDate)" class="text-danger" />
                    </div>

                    <div class="form-group">
                        <label for="topicSubject">주제 *</label>
                        <InputText id="topicSubject" @bind-Value="newTopic.Subject" 
                                 class="form-control" placeholder="주제를 입력하세요"
                                 @ref="topicSubjectInput" />
                        <ValidationMessage For="@(() => newTopic.Subject)" class="text-danger" />
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseNewTopicModal">취소</button>
                        <button type="submit" class="btn btn-primary">저장</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}


<!-- 삭제 확인 모달 -->
@if (showDeleteConfirmationModal)
{
    <div class="modal-overlay" @onclick="CloseDeleteConfirmationModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h3>주제 삭제 확인</h3>
                <button class="btn-close" @onclick="CloseDeleteConfirmationModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="alert alert-warning">
                    <strong>⚠️ 주의:</strong> 이 주제와 관련된 모든 10&10 내용이 함께 삭제됩니다.
                </div>
                <p>정말로 "<strong>@topicToDelete?.Subject</strong>" 주제를 삭제하시겠습니까?</p>
                <p class="text-muted">이 작업은 되돌릴 수 없습니다.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseDeleteConfirmationModal">취소</button>
                <button type="button" class="btn btn-danger" @onclick="ConfirmDeleteTopic">
                    <span class="bi bi-trash"></span> 삭제
                </button>
            </div>
        </div>
    </div>
}

<!-- 10&10 작성/보기 전체 화면 -->
@if (showTenTenModal)
{
    <div class="fullscreen-writing-container">
        <div class="writing-header">
            <div class="header-left">
                <button class="btn btn-outline-secondary" @onclick="CloseTenTenModal">
                    <span class="bi bi-arrow-left"></span> 뒤로가기
                </button>
            </div>
            <div class="header-center">
                <h2>@(isEditing ? "10&10 수정" : "10&10 작성")</h2>
            </div>
            <div class="header-right">
                <button class="btn btn-outline-danger" @onclick="CloseTenTenModal">
                    <span class="bi bi-x"></span> 닫기
                </button>
            </div>
        </div>
        <div class="writing-content">
                @if (selectedTopic != null)
                {
                    @if (HasTenTenForTopic(selectedTopic.Id) && !isEditing)
                    {
                        <!-- 읽기 모드 -->
                        <div class="topic-info-section-readonly">
                            <div class="topic-display">
                                <h3>@selectedTopic.Subject</h3>
                            </div>
                            <div class="topic-meta-readonly">
                                <span class="topic-date">📅 @selectedTopic.TopicDate.ToString("yyyy년 MM월 dd일")</span>
                                @if (!string.IsNullOrEmpty(selectedTopic.Description))
                                {
                                    <p class="topic-description">@selectedTopic.Description</p>
                                }
                            </div>
                        </div>
                        
                        <div class="read-mode-content">
                            @if (isReadOnlyMode)
                            {
                                <div class="partner-badge">
                                    <span class="bi bi-person-heart"></span> 파트너의 10&10
                                </div>
                            }
                            <div class="content-display">
                                <h4>📝 작성된 내용</h4>
                                <div class="content-text">
                                    @(isReadOnlyMode ? sharedTenTen?.Content : currentTenTen.Content)
                                </div>
                            </div>
                            <div class="writing-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseTenTenModal">닫기</button>
                                @if (!isReadOnlyMode)
                                {
                                    <button type="button" class="btn btn-warning" @onclick="() => EnableEditMode()">
                                        <span class="bi bi-pencil"></span> 수정
                                    </button>
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- 작성/수정 모드 -->
                        <div class="topic-info-section">
                            <div class="form-group">
                                <label for="topicDate">날짜 *</label>
                                <input type="date" id="topicDate" @bind="selectedTopic.TopicDate" 
                                       class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="topicSubject">주제 *</label>
                                <input type="text" id="topicSubject" @bind="selectedTopic.Subject" 
                                       class="form-control" placeholder="주제를 입력하세요" />
                            </div>
                            
                            @if (!string.IsNullOrEmpty(selectedTopic.Description))
                            {
                                <div class="form-group">
                                    <label>설명</label>
                                    <p class="topic-description">@selectedTopic.Description</p>
                                </div>
                            }
                        </div>
                        
                        <EditForm Model="currentTenTen" OnValidSubmit="SaveTenTen">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label for="content">10&10 내용 *</label>
                                <div class="timer-container">
                                    <div class="timer-display">
                                        <span class="timer-label">작성 시간:</span>
                                        <span class="timer-value @(isTimerRunning ? "running" : "")">@FormatTime(remainingTime)</span>
                                        @if (isTimerRunning)
                                        {
                                            <span class="timer-status">⏱️ 작성 중...</span>
                                        }
                                        else if (remainingTime == 0)
                                        {
                                            <span class="timer-status">✅ 시간 완료!</span>
                                        }
                                        else
                                        {
                                            <span class="timer-status">⏸️ 대기 중</span>
                                        }
                                    </div>
                                    <div class="timer-controls">
                                        @if (!isTimerRunning && remainingTime > 0)
                                        {
                                            <button type="button" class="btn btn-success btn-sm" @onclick="StartTimer">
                                                <span class="bi bi-play"></span> 시작
                                            </button>
                                        }
                                        else if (isTimerRunning)
                                        {
                                            <button type="button" class="btn btn-warning btn-sm" @onclick="PauseTimer">
                                                <span class="bi bi-pause"></span> 일시정지
                                            </button>
                                        }
                                        <button type="button" class="btn btn-secondary btn-sm" @onclick="ResetTimer">
                                            <span class="bi bi-arrow-clockwise"></span> 리셋
                                        </button>
                                    </div>
                                </div>
                                <InputTextArea id="content" @bind-Value="currentTenTen.Content"
                                            class="@GetTextAreaClass()" rows="20"
                                            placeholder="10분간 마음을 적어보세요..."
                                            @ref="contentTextArea" />
                                <ValidationMessage For="@(() => currentTenTen.Content)" class="text-danger" />
                                <small class="form-text text-muted">최소 10자 이상 입력해주세요.</small>
                                
                            </div>

                            <div class="writing-footer">
                                <button type="button" class="btn btn-secondary" @onclick="CloseTenTenModal">취소</button>
                                <button type="button" class="btn btn-danger" @onclick="() => ShowDeleteConfirmation(selectedTopic)">
                                    <span class="bi bi-trash"></span> 삭제
                                </button>
                                <button type="submit" class="btn btn-primary btn-lg">저장</button>
                            </div>
                        </EditForm>
                    }
                }
        </div>
    </div>
}


@code {
    private List<MeTenTenMaui.Models.TenTen> tenTens = new();
    private List<MeTenTenMaui.Models.Topic> topics = new();
    private List<MeTenTenMaui.Models.Topic> filteredTopics = new();
    private DateTime selectedMonth = DateTime.Now;
    private bool isLoading = true;
    private bool showNewTopicModal = false;
    private bool showMonthSelectorModal = false;
    private bool showDeleteConfirmationModal = false;
    private bool showTenTenModal = false;
    private bool isEditing = false;
    private MeTenTenMaui.Models.Topic? selectedTopic;
    private MeTenTenMaui.Models.Topic? topicToDelete;
    private MeTenTenMaui.Models.CreateTenTenRequest currentTenTen = new();
    private MeTenTenMaui.Models.TenTen? sharedTenTen;
    private MeTenTenMaui.Models.CreateTopicRequest newTopic = new();
    
    
    // 설정 메뉴 변수

    // 타이머 관련 변수
    private int remainingTime = 600; // 10분 = 600초
    private bool isTimerRunning = false;
    private Timer? timer;
    private DateTime timerStartTime;
    private int pausedTime = 0;

    private bool hasPartner = false;
    private bool isReadOnlyMode = false;
    
    // Element References for keyboard handling
    private Microsoft.AspNetCore.Components.Forms.InputTextArea? contentTextArea;
    private Microsoft.AspNetCore.Components.Forms.InputText? topicSubjectInput;

    [SupplyParameterFromQuery(Name = "shared")]
    public bool IsSharedMode { get; set; } = false;

    [SupplyParameterFromQuery(Name = "topicId")]
    public string? SharedTopicId { get; set; }

    [SupplyParameterFromQuery(Name = "tenTenId")]
    public string? SharedTenTenId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (IsSharedMode && !string.IsNullOrEmpty(SharedTopicId) && !string.IsNullOrEmpty(SharedTenTenId))
        {
            await LoadSharedTenTenAsync();
        }
        else
        {
            await LoadData();
            FilterTopicsByMonth();
            await CheckPartnerStatusAsync();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // JavaScript 키보드 헬퍼 초기화
            await JSRuntime.InvokeVoidAsync("setupAutoFocusHandlers");
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            // Topics와 TenTens를 병렬로 로드
            var topicsTask = TopicService.GetTopicsAsync();
            var tenTensTask = TenTenService.GetTenTensAsync();
            
            await Task.WhenAll(topicsTask, tenTensTask);
            
            topics = await topicsTask;
            tenTens = await tenTensTask;
            
            System.Diagnostics.Debug.WriteLine($"[TenTen] Loaded {topics.Count} topics and {tenTens.Count} tentens");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[TenTen] Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadSharedTenTenAsync()
    {
        // 배우자의 완료된 Topic 목록에서 해당 Topic 조회
        var partnerTopics = await PartnerService.GetPartnerCompletedTopicsAsync();
        var topic = partnerTopics.FirstOrDefault(t => t.FirebaseKey == SharedTopicId);
        
        if (topic != null)
        {
            // 해당 Topic의 TenTens 조회 (공유 DEK 사용)
            var tenTens = await PartnerService.GetPartnerTopicTenTensAsync(SharedTopicId);
            var tenTen = tenTens.FirstOrDefault(t => t.FirebaseKey == SharedTenTenId);
            
            if (tenTen != null)
            {
                selectedTopic = topic;
                sharedTenTen = tenTen;
                showTenTenModal = true;
                isReadOnlyMode = true;
                StateHasChanged();
            }
        }
    }

    private async Task CheckPartnerStatusAsync()
    {
        var partnerInfo = await PartnerService.GetPartnerInfoAsync();
        hasPartner = partnerInfo != null;
    }



    private void OnMonthChanged()
    {
        FilterTopicsByMonth();
        StateHasChanged();
    }

    private void FilterTopicsByMonth()
    {
        var startDate = new DateTime(selectedMonth.Year, selectedMonth.Month, 1);
        var endDate = startDate.AddMonths(1).AddDays(-1);
        
        filteredTopics = topics.Where(t => t.TopicDate >= startDate && t.TopicDate <= endDate).ToList();
    }

    private void ShowMonthSelector()
    {
        showMonthSelectorModal = true;
    }

    private void CloseMonthSelector()
    {
        showMonthSelectorModal = false;
    }

    private void SelectMonth(DateTime month)
    {
        selectedMonth = new DateTime(month.Year, month.Month, 1);
        FilterTopicsByMonth();
        CloseMonthSelector();
        StateHasChanged();
    }


    private bool HasTenTenForTopic(int topicId)
    {
        // 해당 Topic을 찾아서 Firebase Key와 int ID 모두 확인
        var topic = topics.FirstOrDefault(t => t.Id == topicId);
        if (topic == null) return false;
        
        // Firebase Key 또는 int ID로 매칭 시도
        var hasTenTen = tenTens.Any(t => 
            t.TopicId == topicId.ToString() || 
            (!string.IsNullOrEmpty(topic.FirebaseKey) && t.TopicId == topic.FirebaseKey));
            
        System.Diagnostics.Debug.WriteLine($"[TenTen] HasTenTenForTopic({topicId}): {hasTenTen}, Topic FirebaseKey: '{topic.FirebaseKey}', Total TenTens: {tenTens.Count}");
        foreach (var t in tenTens)
        {
            System.Diagnostics.Debug.WriteLine($"[TenTen] TenTen TopicId: '{t.TopicId}', Looking for: '{topicId}' or '{topic.FirebaseKey}'");
        }
        return hasTenTen;
    }

    private void ShowNewTopicModal()
    {
        newTopic = new MeTenTenMaui.Models.CreateTopicRequest
        {
            TopicDate = DateTime.Now,
            CreatedAt = DateTime.Now
        };
        showNewTopicModal = true;
        StateHasChanged();
        
        // 모달이 열린 후 입력 필드로 자동 포커스
        _ = FocusTopicSubjectAfterDelay();
    }

    private void CloseNewTopicModal()
    {
        showNewTopicModal = false;
        newTopic = new();
    }


    private void ShowDeleteConfirmation(MeTenTenMaui.Models.Topic topic)
    {
        topicToDelete = topic;
        showDeleteConfirmationModal = true;
    }

    private void CloseDeleteConfirmationModal()
    {
        showDeleteConfirmationModal = false;
        topicToDelete = null;
    }

    private async Task ConfirmDeleteTopic()
    {
        if (topicToDelete != null)
        {
            try
            {
                await TopicService.DeleteTopicAsync(topicToDelete.Id);
                await LoadData();
                FilterTopicsByMonth();
                CloseDeleteConfirmationModal();
                CloseTenTenModal(); // 10&10 작성 화면도 닫기
            }
            catch (Exception)
            {
                // 에러 처리
            }
        }
    }

    private async Task SaveNewTopic()
    {
        try
        {
            await TopicService.CreateTopicAsync(newTopic);
            await LoadData();
            FilterTopicsByMonth();
            CloseNewTopicModal();
        }
        catch (Exception)
        {
            // 에러 처리
        }
    }

    private void SelectTopic(MeTenTenMaui.Models.Topic topic)
    {
        selectedTopic = topic;
        // Firebase Key 또는 int ID로 매칭 시도
        var existingTenTen = tenTens.FirstOrDefault(t => 
            t.TopicId == topic.Id.ToString() || 
            (!string.IsNullOrEmpty(topic.FirebaseKey) && t.TopicId == topic.FirebaseKey));
        
        if (existingTenTen != null)
        {
            // 기존 10&10이 있으면 읽기 모드
            isEditing = false;
            isReadOnlyMode = false; // 내가 작성한 TenTen은 읽기 전용이 아님
            sharedTenTen = existingTenTen; // 읽기 모드에서 표시할 TenTen
            currentTenTen = new MeTenTenMaui.Models.CreateTenTenRequest
            {
                Content = existingTenTen.Content,
                TopicId = existingTenTen.TopicId
            };
        }
        else
        {
            // 기존 10&10이 없으면 새로 작성
            isEditing = false;
            currentTenTen = new MeTenTenMaui.Models.CreateTenTenRequest
            {
                TopicId = !string.IsNullOrEmpty(topic.FirebaseKey) ? topic.FirebaseKey : topic.Id.ToString()
            };
        }
        
        showTenTenModal = true;
        StateHasChanged();
        
        // 10&10 작성 모달이 열린 후 입력 필드로 자동 포커스
        _ = FocusContentAfterDelay();
    }

    private void CloseTenTenModal()
    {
        showTenTenModal = false;
        selectedTopic = null;
        currentTenTen = new();
        isEditing = false;
        StopTimer();
    }

    private void EnableEditMode()
    {
        isEditing = true;
        StateHasChanged();
    }

    private async Task SaveTenTen()
    {
        try
        {
            var existingTenTen = tenTens.FirstOrDefault(t => t.TopicId == currentTenTen.TopicId);
            
            if (existingTenTen != null)
            {
                // 기존 10&10 업데이트
                var updateRequest = new MeTenTenMaui.Models.UpdateTenTenRequest
                {
                    Content = currentTenTen.Content,
                };
                await TenTenService.UpdateTenTenAsync(existingTenTen.Id, updateRequest);
            }
            else
            {
                // 새 10&10 생성
                // 파트너가 있으면 항상 "shared", 없으면 "personal"
                var encryptionType = hasPartner ? "shared" : "personal";
                await TenTenService.CreateTenTenAsync(currentTenTen, encryptionType);
                
                System.Diagnostics.Debug.WriteLine($"[TenTen] Created new TenTen with encryption type: {encryptionType}");
            }
            
            // 주제 정보도 업데이트 (날짜 및 제목 변경 반영)
            if (selectedTopic != null)
            {
                var updateTopicRequest = new MeTenTenMaui.Models.UpdateTopicRequest
                {
                    Id = selectedTopic.Id,
                    Subject = selectedTopic.Subject,
                    Description = selectedTopic.Description,
                    TopicDate = selectedTopic.TopicDate,
                    IsActive = selectedTopic.IsActive
                };
                await TopicService.UpdateTopicAsync(selectedTopic.Id, updateTopicRequest);
            }
            
            await LoadData();
            FilterTopicsByMonth();
            StateHasChanged(); // UI 상태 강제 업데이트
            CloseTenTenModal();
            StopTimer();
        }
        catch (Exception ex)
        {
            // 에러 처리
            System.Diagnostics.Debug.WriteLine($"[TenTen] Error saving TenTen: {ex.Message}");
        }
    }

    // 타이머 관련 메서드들
    private void StartTimer()
    {
        if (!isTimerRunning && remainingTime > 0)
        {
            isTimerRunning = true;
            timerStartTime = DateTime.Now;
            timer = new Timer(TimerCallback, null, 0, 1000); // 1초마다 업데이트
            StateHasChanged();
        }
    }

    private void PauseTimer()
    {
        if (isTimerRunning)
        {
            isTimerRunning = false;
            timer?.Dispose();
            pausedTime = remainingTime;
            StateHasChanged();
        }
    }

    private void ResetTimer()
    {
        StopTimer();
        remainingTime = 600; // 10분으로 리셋
        pausedTime = 0;
        StateHasChanged();
    }

    private void StopTimer()
    {
        isTimerRunning = false;
        timer?.Dispose();
        timer = null;
    }

    private void TimerCallback(object? state)
    {
        if (isTimerRunning)
        {
            var elapsed = (int)(DateTime.Now - timerStartTime).TotalSeconds;
            remainingTime = Math.Max(0, 600 - elapsed);

            if (remainingTime <= 0)
            {
                isTimerRunning = false;
                timer?.Dispose();
                InvokeAsync(() => {
                    StateHasChanged();
                });
            }
            else
            {
                InvokeAsync(StateHasChanged);
            }
        }
    }

    private string FormatTime(int seconds)
    {
        var minutes = seconds / 60;
        var remainingSeconds = seconds % 60;
        return $"{minutes:D2}:{remainingSeconds:D2}";
    }

    private string GetTextAreaClass()
    {
        var baseClass = "form-control content-textarea";
        if (isTimerRunning)
        {
            baseClass += " writing-mode";
        }
        return baseClass;
    }


    private string GetSelectedMonthDisplay()
    {
        if (DateTime.TryParse(selectedMonth.ToString("yyyy-MM-01"), out DateTime monthDate))
        {
            return monthDate.ToString("yyyy년 MM월");
        }
        return selectedMonth.ToString("yyyy년 MM월");
    }







    private async Task FocusContentAfterDelay()
    {
        await Task.Delay(300); // 모달 애니메이션 완료 대기
        await JSRuntime.InvokeVoidAsync("focusInputInModal", "content");
    }

    private async Task FocusTopicSubjectAfterDelay()
    {
        await Task.Delay(300); // 모달 애니메이션 완료 대기
        await JSRuntime.InvokeVoidAsync("focusInputInModal", "topicSubject");
    }

    public void Dispose()
    {
        StopTimer();
    }
}
