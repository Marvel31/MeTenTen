@page "/settings"
@using MeTenTenMaui.Models
@using MeTenTenMaui.Services
@using MeTenTenMaui.Models.Firebase
@inject IPartnerService PartnerService
@inject ITopicService TopicService
@inject IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>설정</PageTitle>

<BreadcrumbNavigator CurrentPageTitle="설정" />

<div class="settings-container">
    <h2>설정</h2>
    
    <!-- 내 정보 관리 섹션 -->
    <div class="user-info-section">
        <h3>내 정보 관리</h3>
        
        <div class="user-details">
            <div class="user-info-item">
                <label>이름:</label>
                <span>@userDisplayName</span>
            </div>
            <div class="user-info-item">
                <label>이메일:</label>
                <span>@userEmail</span>
            </div>
        </div>
        
        <!-- 비밀번호 변경 폼 -->
        <div class="password-change-section">
            <h4>비밀번호 변경</h4>
            <div class="password-form">
                <div class="form-group">
                    <label for="currentPassword">현재 비밀번호</label>
                    <input type="password" id="currentPassword" @bind="currentPassword" 
                           class="form-control" placeholder="현재 비밀번호 입력" />
                </div>
                <div class="form-group">
                    <label for="newPassword">새 비밀번호</label>
                    <input type="password" id="newPassword" @bind="newPassword" 
                           class="form-control" placeholder="새 비밀번호 입력" />
                </div>
                <div class="form-group">
                    <label for="confirmPassword">새 비밀번호 확인</label>
                    <input type="password" id="confirmPassword" @bind="confirmPassword" 
                           class="form-control" placeholder="새 비밀번호 다시 입력" />
                </div>
                <button @onclick="ChangePasswordAsync" class="btn btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span>변경 중...</span>
                    }
                    else
                    {
                        <span>비밀번호 변경</span>
                    }
                </button>
            </div>
            @if (!string.IsNullOrEmpty(passwordMessage))
            {
                <div class="alert @(passwordSuccess ? "alert-success" : "alert-danger")">
                    @passwordMessage
                </div>
            }
        </div>
    </div>
    
    <!-- 배우자 관리 섹션 -->
    <div class="partner-section">
        <h3>배우자 관리</h3>
        
        @if (partner == null)
        {
            <div class="no-partner">
                <p>연결된 배우자가 없습니다.</p>
                <div class="invite-form">
                    <input @bind="partnerEmail" placeholder="배우자 이메일 입력" class="form-control" />
                    <button @onclick="ShowInviteDialog" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>초대 중...</span>
                        }
                        else
                        {
                            <span>배우자 초대</span>
                        }
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                        @message
                    </div>
                }
            </div>
        }
        else
        {
            <div class="partner-info">
                <div class="partner-details">
                    <p><strong>연결된 배우자:</strong> @partner.PartnerDisplayName</p>
                    <p><strong>이메일:</strong> @partner.PartnerEmail</p>
                    <p><strong>연결일:</strong> @FormatDate(partner.ConnectedAt)</p>
                </div>
                
                
                <div class="shared-topic-info">
                    <p><strong>배우자의 Topic 상태:</strong> @sharedTopicName</p>
                    <small class="text-muted">새로운 방식에서는 배우자가 작성한 모든 Topic이 자동으로 공유됩니다.</small>
                </div>
                
                <div class="partner-actions">
                    <button @onclick="DisconnectPartnerAsync" class="btn btn-danger" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>해제 중...</span>
                        }
                        else
                        {
                            <span>배우자 연결 해제</span>
                        }
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(message))
                {
                    <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                        @message
                    </div>
                }
            </div>
        }
    </div>
    
    <!-- 계정 관리 섹션 -->
    <div class="account-section">
        <h3>계정 관리</h3>
        <div class="account-actions">
            <button @onclick="HandleLogout" class="btn btn-danger" disabled="@isLoading">
                @if (isLoading)
                {
                    <span>로그아웃 중...</span>
                }
                else
                {
                    <span>로그아웃</span>
                }
            </button>
        </div>
    </div>
    
</div>

<!-- 배우자 초대 다이얼로그 -->
@if (showInviteDialog)
{
    <div class="modal-overlay" @onclick="HideInviteDialog">
        <div class="modal-content" @onclick:stopPropagation="true">
            <h4>배우자 초대</h4>
            <p>배우자와 연결하려면 내 비밀번호만 필요합니다.</p>
            <div class="password-form">
                <div class="form-group">
                    <label for="myPassword">내 비밀번호</label>
                    <input @bind="myPassword" type="password" id="myPassword" class="form-control" placeholder="내 비밀번호 입력" />
                </div>
                <div class="modal-actions">
                    <button @onclick="HideInviteDialog" class="btn btn-secondary">취소</button>
                    <button @onclick="InvitePartnerAsync" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>초대 중...</span>
                        }
                        else
                        {
                            <span>초대하기</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
}


<style>
    .settings-container {
        padding: 20px;
        max-width: 600px;
        margin: 0 auto;
    }

    .user-info-section, .partner-section, .account-section, .other-settings {
        margin-bottom: 30px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .user-info-section h3, .user-info-section h4, .partner-section h3, .account-section h3, .other-settings h3 {
        margin-top: 0;
        color: #333;
    }

    .user-details {
        margin-bottom: 20px;
    }

    .user-info-item {
        display: flex;
        margin-bottom: 10px;
        align-items: center;
    }

    .user-info-item label {
        font-weight: bold;
        min-width: 80px;
        margin-right: 10px;
    }

    .user-info-item span {
        color: #666;
    }

    .password-change-section {
        border-top: 1px solid #ddd;
        padding-top: 20px;
    }

    .password-form {
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #333;
    }

    .invite-form {
        display: flex;
        gap: 10px;
        margin-top: 15px;
    }

    .form-control {
        flex: 1;
        padding: 8px 12px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-success {
        background-color: #28a745;
        color: white;
    }

    .btn-warning {
        background-color: #ffc107;
        color: #212529;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .partner-details {
        margin-bottom: 15px;
    }

    .shared-topic, .share-topic {
        margin-bottom: 15px;
    }

    .partner-actions {
        margin-top: 15px;
    }

    .alert {
        padding: 10px;
        margin-top: 10px;
        border-radius: 4px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 500px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .topic-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .topic-item {
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 10px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .topic-item:hover {
        background-color: #f0f0f0;
    }

    .topic-item h5 {
        margin: 0 0 5px 0;
        color: #333;
    }

    .topic-item p {
        margin: 0 0 5px 0;
        color: #666;
        font-size: 14px;
    }

    .topic-item small {
        color: #999;
        font-size: 12px;
    }

    .modal-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 15px;
    }

    .password-form {
        margin-top: 15px;
    }
</style>

@code {
    private PartnerInfo? partner;
    private List<Topic> topics = new();
    private string partnerEmail = "";
    private string message = "";
    private bool isSuccess = false;
    private bool isLoading = false;
    private string sharedTopicName = "";
    
    // 사용자 정보 관련 변수
    private string userDisplayName = "";
    private string userEmail = "";
    
    // 비밀번호 변경 관련 변수
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    private string passwordMessage = "";
    private bool passwordSuccess = false;
    
    // 배우자 초대 관련 변수
    private bool showInviteDialog = false;
    private string myPassword = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfoAsync();
        await LoadPartnerInfoAsync();
        await LoadTopicsAsync();
    }

    private async Task LoadUserInfoAsync()
    {
        try
        {
            userDisplayName = AuthService.CurrentUserName ?? "사용자";
            userEmail = AuthService.CurrentUserEmail ?? "";
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[Settings] Error loading user info: {ex.Message}");
        }
    }


    private async Task LoadPartnerInfoAsync()
    {
        try
        {
            partner = await PartnerService.GetPartnerInfoAsync();
            if (partner != null)
            {
                // 배우자의 완료된 Topic 목록 조회 (가장 최근 것 하나만)
                var partnerTopics = await PartnerService.GetPartnerCompletedTopicsAsync();
                if (partnerTopics.Any())
                {
                    var latestTopic = partnerTopics.OrderByDescending(t => t.CreatedAt).First();
                    sharedTopicName = latestTopic.Subject;
                }
                else
                {
                    sharedTopicName = "작성된 Topic 없음";
                }
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[Settings] Error loading partner info: {ex.Message}");
        }
    }

    private async Task LoadTopicsAsync()
    {
        try
        {
            topics = await TopicService.GetTopicsAsync();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[Settings] Error loading topics: {ex.Message}");
        }
    }

    private void ShowInviteDialog()
    {
        if (string.IsNullOrWhiteSpace(partnerEmail))
        {
            message = "배우자 이메일을 입력해주세요.";
            isSuccess = false;
            return;
        }
        showInviteDialog = true;
    }

    private void HideInviteDialog()
    {
        showInviteDialog = false;
        myPassword = "";
    }

    private async Task InvitePartnerAsync()
    {
        if (string.IsNullOrWhiteSpace(myPassword))
        {
            message = "내 비밀번호를 입력해주세요.";
            isSuccess = false;
            return;
        }

        isLoading = true;
        try
        {
            var result = await PartnerService.InvitePartnerAsync(partnerEmail, myPassword);
            message = result.message;
            isSuccess = result.success;
            
            if (result.success)
            {
                partnerEmail = "";
                HideInviteDialog();
                await LoadPartnerInfoAsync();
            }
        }
        catch (Exception ex)
        {
            message = "배우자 초대 중 오류가 발생했습니다.";
            isSuccess = false;
            System.Diagnostics.Debug.WriteLine($"[Settings] Error inviting partner: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }



    private async Task DisconnectPartnerAsync()
    {
        isLoading = true;
        try
        {
            var result = await PartnerService.DisconnectPartnerAsync();
            message = result.message;
            isSuccess = result.success;
            
            if (result.success)
            {
                await LoadPartnerInfoAsync();
            }
        }
        catch (Exception ex)
        {
            message = "배우자 연결 해제 중 오류가 발생했습니다.";
            isSuccess = false;
            System.Diagnostics.Debug.WriteLine($"[Settings] Error disconnecting partner: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ChangePasswordAsync()
    {
        // 유효성 검사
        if (string.IsNullOrWhiteSpace(currentPassword))
        {
            passwordMessage = "현재 비밀번호를 입력해주세요.";
            passwordSuccess = false;
            return;
        }

        if (string.IsNullOrWhiteSpace(newPassword))
        {
            passwordMessage = "새 비밀번호를 입력해주세요.";
            passwordSuccess = false;
            return;
        }

        if (newPassword.Length < 6)
        {
            passwordMessage = "새 비밀번호는 최소 6자 이상이어야 합니다.";
            passwordSuccess = false;
            return;
        }

        if (newPassword != confirmPassword)
        {
            passwordMessage = "새 비밀번호와 확인 비밀번호가 일치하지 않습니다.";
            passwordSuccess = false;
            return;
        }

        if (currentPassword == newPassword)
        {
            passwordMessage = "현재 비밀번호와 새 비밀번호가 같습니다.";
            passwordSuccess = false;
            return;
        }

        isLoading = true;
        passwordMessage = "";

        try
        {
            var result = await AuthService.ChangePasswordAsync(currentPassword, newPassword);
            passwordMessage = result.Success ? "비밀번호가 성공적으로 변경되었습니다." : result.ErrorMessage;
            passwordSuccess = result.Success;

            if (result.Success)
            {
                // 폼 초기화
                currentPassword = "";
                newPassword = "";
                confirmPassword = "";
            }
        }
        catch (Exception ex)
        {
            passwordMessage = "비밀번호 변경 중 오류가 발생했습니다.";
            passwordSuccess = false;
            System.Diagnostics.Debug.WriteLine($"[Settings] Error changing password: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }


    private string FormatDate(string? dateString)
    {
        if (string.IsNullOrEmpty(dateString))
            return "알 수 없음";
            
        if (DateTime.TryParse(dateString, out DateTime date))
            return date.ToString("yyyy-MM-dd HH:mm");
            
        return dateString;
    }

    private string FormatDate(DateTime date)
    {
        return date.ToString("yyyy-MM-dd HH:mm");
    }

    private async Task HandleLogout()
    {
        isLoading = true;
        try
        {
            await AuthService.SignOutAsync();
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"[Settings] Error during logout: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
